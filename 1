```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Image Annotation Platform</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.1/fabric.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .tool-btn.active {
            background-color: #3b82f6;
            color: white;
        }
        .canvas-container {
            border: 1px solid #e2e8f0;
            border-radius: 0.5rem;
            overflow: hidden;
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <header class="mb-8 text-center">
            <h1 class="text-3xl md:text-4xl font-bold text-gray-800 mb-2">Interactive Image Annotation Platform</h1>
            <p class="text-gray-600">Dual-canvas annotation with advanced tools</p>
        </header>

        <!-- Toolbar -->
        <div class="bg-white rounded-lg shadow-md p-4 mb-6">
            <div class="flex flex-wrap items-center justify-between gap-4">
                <div class="flex flex-wrap gap-2">
                    <button id="brush-tool" class="tool-btn px-4 py-2 rounded-lg transition-colors bg-gray-200 text-gray-700 hover:bg-gray-300 flex items-center">
                        <i class="fas fa-pen mr-2"></i> Brush
                    </button>
                    <button id="rectangle-tool" class="tool-btn px-4 py-2 rounded-lg transition-colors bg-gray-200 text-gray-700 hover:bg-gray-300 flex items-center">
                        <i class="fas fa-square mr-2"></i> Rectangle
                    </button>
                    <button id="text-tool" class="tool-btn px-4 py-2 rounded-lg transition-colors bg-gray-200 text-gray-700 hover:bg-gray-300 flex items-center">
                        <i class="fas fa-font mr-2"></i> Text
                    </button>
                    <button id="eraser-tool" class="tool-btn px-4 py-2 rounded-lg transition-colors bg-gray-200 text-gray-700 hover:bg-gray-300 flex items-center">
                        <i class="fas fa-eraser mr-2"></i> Eraser
                    </button>
                </div>
                
                <div class="flex flex-wrap gap-3 items-center">
                    <div class="flex items-center">
                        <label for="color-picker" class="mr-2 text-gray-700">Color:</label>
                        <input type="color" id="color-picker" class="w-8 h-8 cursor-pointer" value="#3b82f6">
                    </div>
                    
                    <div class="flex items-center">
                        <label for="brush-size" class="mr-2 text-gray-700">Size:</label>
                        <input type="range" id="brush-size" min="1" max="50" value="5" class="w-24">
                        <span id="size-value" class="ml-2 text-gray-700">5</span>
                    </div>
                    
                    <button id="undo-btn" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 flex items-center">
                        <i class="fas fa-undo mr-2"></i> Undo
                    </button>
                    
                    <button id="redo-btn" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 flex items-center">
                        <i class="fas fa-redo mr-2"></i> Redo
                    </button>
                    
                    <button id="export-btn" class="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 flex items-center">
                        <i class="fas fa-download mr-2"></i> Export
                    </button>
                    
                    <button id="reset-btn" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 flex items-center">
                        <i class="fas fa-trash mr-2"></i> Reset
                    </button>
                </div>
            </div>
        </div>

        <!-- Canvas Area -->
        <div class="flex flex-col lg:flex-row gap-6">
            <!-- Canvas 1 -->
            <div class="w-full lg:w-1/2">
                <div class="bg-white rounded-lg shadow-md p-4">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-semibold text-gray-800">Canvas 1</h2>
                        <div>
                            <input type="file" id="image-upload-1" accept="image/*" class="hidden">
                            <label for="image-upload-1" class="px-4 py-2 bg-blue-500 text-white rounded-lg cursor-pointer hover:bg-blue-600">
                                <i class="fas fa-upload mr-2"></i> Upload Image
                            </label>
                        </div>
                    </div>
                    <div class="canvas-container">
                        <canvas id="canvas-1" width="800" height="500"></canvas>
                    </div>
                </div>
            </div>
            
            <!-- Canvas 2 -->
            <div class="w-full lg:w-1/2">
                <div class="bg-white rounded-lg shadow-md p-4">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-semibold text-gray-800">Canvas 2</h2>
                        <div>
                            <input type="file" id="image-upload-2" accept="image/*" class="hidden">
                            <label for="image-upload-2" class="px-4 py-2 bg-blue-500 text-white rounded-lg cursor-pointer hover:bg-blue-600">
                                <i class="fas fa-upload mr-2"></i> Upload Image
                            </label>
                        </div>
                    </div>
                    <div class="canvas-container">
                        <canvas id="canvas-2" width="800" height="500"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Info Section -->
        <div class="mt-8 bg-white rounded-lg shadow-md p-6">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">How to Use</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div class="bg-blue-50 p-4 rounded-lg">
                    <div class="text-blue-500 text-2xl mb-2"><i class="fas fa-upload"></i></div>
                    <h3 class="font-semibold text-gray-800">Upload Images</h3>
                    <p class="text-gray-600">Click "Upload Image" to load your images onto the canvases</p>
                </div>
                <div class="bg-green-50 p-4 rounded-lg">
                    <div class="text-green-500 text-2xl mb-2"><i class="fas fa-pen"></i></div>
                    <h3 class="font-semibold text-gray-800">Annotate</h3>
                    <p class="text-gray-600">Use brush, shapes, text tools to annotate your images</p>
                </div>
                <div class="bg-purple-50 p-4 rounded-lg">
                    <div class="text-purple-500 text-2xl mb-2"><i class="fas fa-exchange-alt"></i></div>
                    <h3 class="font-semibold text-gray-800">Compare</h3>
                    <p class="text-gray-600">View and compare annotations side-by-side</p>
                </div>
                <div class="bg-yellow-50 p-4 rounded-lg">
                    <div class="text-yellow-500 text-2xl mb-2"><i class="fas fa-download"></i></div>
                    <h3 class="font-semibold text-gray-800">Export</h3>
                    <p class="text-gray-600">Export your annotated images when finished</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global state
        const state = {
            activeTool: 'brush',
            brushColor: '#3b82f6',
            brushSize: 5,
            fontFamily: 'Arial',
            fontSize: 16
        };

        // Canvas instances
        let canvas1, canvas2;
        let activeCanvas = null;

        // History stacks for undo/redo
        const history = {
            canvas1: {
                undo: [],
                redo: []
            },
            canvas2: {
                undo: [],
                redo: []
            }
        };

        // Initialize Fabric.js canvases
        function initCanvases() {
            canvas1 = new fabric.Canvas('canvas-1', {
                backgroundColor: '#f8fafc',
                selection: true
            });
            
            canvas2 = new fabric.Canvas('canvas-2', {
                backgroundColor: '#f8fafc',
                selection: true
            });
            
            // Set initial active canvas
            activeCanvas = canvas1;
            
            // Save initial state
            saveState(canvas1);
            saveState(canvas2);
            
            // Event listeners for canvas interactions
            canvas1.on('object:added', () => saveState(canvas1));
            canvas1.on('object:modified', () => saveState(canvas1));
            canvas1.on('object:removed', () => saveState(canvas1));
            
            canvas2.on('object:added', () => saveState(canvas2));
            canvas2.on('object:modified', () => saveState(canvas2));
            canvas2.on('object:removed', () => saveState(canvas2));
        }

        // Save canvas state for undo/redo
        function saveState(canvas) {
            const canvasData = canvas.toJSON();
            const canvasHistory = canvas === canvas1 ? history.canvas1 : history.canvas2;
            
            canvasHistory.undo.push(canvasData);
            
            // Limit undo history to 50 states
            if (canvasHistory.undo.length > 50) {
                canvasHistory.undo.shift();
            }
            
            // Clear redo stack when new action is performed
            canvasHistory.redo = [];
        }

        // Undo last action
        function undo(canvas) {
            const canvasHistory = canvas === canvas1 ? history.canvas1 : history.canvas2;
            
            if (canvasHistory.undo.length > 1) {
                const currentState = canvas.toJSON();
                canvasHistory.redo.push(currentState);
                
                const previousState = canvasHistory.undo.pop();
                canvas.loadFromJSON(previousState, () => {
                    canvas.renderAll();
                });
            }
        }

        // Redo last undone action
        function redo(canvas) {
            const canvasHistory = canvas === canvas1 ? history.canvas1 : history.canvas2;
            
            if (canvasHistory.redo.length > 0) {
                const currentState = canvas.toJSON();
                canvasHistory.undo.push(currentState);
                
                const nextState = canvasHistory.redo.pop();
                canvas.loadFromJSON(nextState, () => {
                    canvas.renderAll();
                });
            }
        }

        // Configure active tool
        function configureTool(tool) {
            state.activeTool = tool;
            
            // Update UI
            document.querySelectorAll('.tool-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            document.getElementById(`${tool}-tool`).classList.add('active');
            
            // Configure both canvases
            [canvas1, canvas2].forEach(canvas => {
                canvas.isDrawingMode = false;
                canvas.off('mouse:down');
                canvas.off('mouse:move');
                canvas.off('mouse:up');
                
                switch(tool) {
                    case 'brush':
                        canvas.isDrawingMode = true;
                        const brush = new fabric.PencilBrush(canvas);
                        brush.color = state.brushColor;
                        brush.width = state.brushSize;
                        canvas.freeDrawingBrush = brush;
                        break;
                        
                    case 'rectangle':
                        setupRectangleTool(canvas);
                        break;
                        
                    case 'text':
                        setupTextTool(canvas);
                        break;
                        
                    case 'eraser':
                        canvas.isDrawingMode = true;
                        canvas.freeDrawingBrush = new fabric.EraserBrush(canvas);
                        canvas.freeDrawingBrush.width = state.brushSize;
                        break;
                }
            });
        }

        // Setup rectangle tool
        function setupRectangleTool(canvas) {
            let isDrawing = false;
            let newRectangle;
            
            canvas.on('mouse:down', (o) => {
                isDrawing = true;
                const pointer = canvas.getPointer(o.e);
                newRectangle = new fabric.Rect({
                    left: pointer.x,
                    top: pointer.y,
                    width: 0,
                    height: 0,
                    fill: 'rgba(59, 130, 246, 0.3)',
                    stroke: state.brushColor,
                    strokeWidth: 2,
                    selectable: true
                });
                canvas.add(newRectangle);
            });
            
            canvas.on('mouse:move', (o) => {
                if (!isDrawing) return;
                const pointer = canvas.getPointer(o.e);
                if (newRectangle) {
                    newRectangle.set({
                        width: Math.abs(pointer.x - newRectangle.left),
                        height: Math.abs(pointer.y - newRectangle.top)
                    });
                    canvas.renderAll();
                }
            });
            
            canvas.on('mouse:up', () => {
                isDrawing = false;
            });
        }

        // Setup text tool
        function setupTextTool(canvas) {
            canvas.on('mouse:down', (o) => {
                const pointer = canvas.getPointer(o.e);
                const textbox = new fabric.Textbox('Annotation text', {
                    left: pointer.x,
                    top: pointer.y,
                    width: 200,
                    fontSize: state.fontSize,
                    fill: state.brushColor,
                    editable: true,
                    hasControls: true
                });
                canvas.add(textbox);
                textbox.enterEditing();
                canvas.setActiveObject(textbox);
            });
        }

        // Load image to canvas
        function loadImageToCanvas(file, canvas) {
            const reader = new FileReader();
            reader.onload = (event) => {
                const imgObj = new Image();
                imgObj.src = event.target.result;
                imgObj.onload = () => {
                    const fabricImage = new fabric.Image(imgObj, {
                        left: 0,
                        top: 0,
                        scaleX: canvas.width / imgObj.width,
                        scaleY: canvas.height / imgObj.height,
                        selectable: false
                    });
                    canvas.setBackgroundImage(fabricImage, canvas.renderAll.bind(canvas));
                };
            };
            reader.readAsDataURL(file);
        }

        // Export canvas as image
        function exportCanvas(canvas) {
            const dataURL = canvas.toDataURL({
                format: 'png',
                quality: 0.8
            });
            
            const link = document.createElement('a');
            link.href = dataURL;
            link.download = 'annotated-image.png';
            link.click();
        }

        // Reset canvas
        function resetCanvas(canvas) {
            canvas.clear();
            canvas.backgroundColor = '#f8fafc';
            canvas.renderAll();
            saveState(canvas);
        }

        // Event Listeners
        document.addEventListener('DOMContentLoaded', () => {
            initCanvases();
            
            // Tool buttons
            document.getElementById('brush-tool').addEventListener('click', () => configureTool('brush'));
            document.getElementById('rectangle-tool').addEventListener('click', () => configureTool('rectangle'));
            document.getElementById('text-tool').addEventListener('click', () => configureTool('text'));
            document.getElementById('eraser-tool').addEventListener('click', () => configureTool('eraser'));
            
            // Color picker
            document.getElementById('color-picker').addEventListener('input', (e) => {
                state.brushColor = e.target.value;
                if (state.activeTool === 'brush') {
                    configureTool('brush');
                }
            });
            
            // Brush size
            const brushSize = document.getElementById('brush-size');
            const sizeValue = document.getElementById('size-value');
            
            brushSize.addEventListener('input', (e) => {
                state.brushSize = parseInt(e.target.value);
                sizeValue.textContent = state.brushSize;
                if (state.activeTool === 'brush' || state.activeTool === 'eraser') {
                    configureTool(state.activeTool);
                }
            });
            
            // Undo/Redo
            document.getElementById('undo-btn').addEventListener('click', () => {
                undo(activeCanvas);
            });
            
            document.getElementById('redo-btn').addEventListener('click', () => {
                redo(activeCanvas);
            });
            
            // Export
            document.getElementById('export-btn').addEventListener('click', () => {
                exportCanvas(activeCanvas);
            });
            
            // Reset
            document.getElementById('reset-btn').addEventListener('click', () => {
                resetCanvas(activeCanvas);
            });
            
            // Image uploads
            document.getElementById('image-upload-1').addEventListener('change', (e) => {
                if (e.target.files[0]) {
                    loadImageToCanvas(e.target.files[0], canvas1);
                }
            });
            
            document.getElementById('image-upload-2').addEventListener('change', (e) => {
                if (e.target.files[0]) {
                    loadImageToCanvas(e.target.files[0], canvas2);
                }
            });
            
            // Set initial active tool
            configureTool('brush');
        });
    </script>
</body>
</html>
```
